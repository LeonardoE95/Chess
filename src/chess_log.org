#+TITLE: Chess in C (ft. SDL2)
#+AUTHOR: Leonardo Tamiano

* Idea
  The basic idea is to implement the classical chess game in C using
  the library SDL2.

* Game Info
  The board in chess is an 8x8 board.

  There are two types players: the white player and the black player.

  Each player has 16 distinct pieces, each of which has a particular
  class type, which determinies how it can move on the board. The
  division is done as follows:

  - PAWNS, these are 8   (P)
  - ROOKS, these are 2   (R)
  - KNIGHTS, these are 2 (K)
  - BISHOPS, these are 2 (B)
  - QUEEN, only 1        (Q)
  - KING, only 1         (K)

  Their initial positioning is as follows:

  P P P P P P P P
  R K B Q K B K R

* Development Log
** DONE Find assets
   [2021-11-27 sab 08:56]

   I was thinking of getting both chess pieces as assets as well as
   the chess board.

   But, thinking about it: what if I just manually draw the board
   instead? How bad would it look like?

   --------------------------------
   [2021-11-27 sab 09:11]

   I checked and apparently the board does not look bad at all if I
   manually draw it.

   As far as the other assets go, these look good enough for my taste,
   and they should be free to use.

   https://commons.wikimedia.org/wiki/Category:SVG_chess_pieces

** DONE Display board
   [2021-11-27 sab 08:57]

   To display the board I used the following code

   #+begin_src c
void render_board(SDL_Renderer *renderer) {
  int counter, col;
  int colors[] = {GRID_COLOR_1, GRID_COLOR_2};
  
  for (int x = 0 ; x < BOARD_WIDTH; x++) {
    counter = x % 2;
    for (int y = 0; y < BOARD_HEIGHT; y++) {
      col = colors[counter];
      scc(SDL_SetRenderDrawColor(renderer, HEX_COLOR(col)));

      SDL_Rect rect = {
	(int) floorf(x * CELL_WIDTH),
	(int) floorf(y * CELL_HEIGHT),
	(int) floorf(CELL_WIDTH),
	(int) floorf(CELL_HEIGHT),
      };

      scc(SDL_RenderFillRect(renderer, &rect));

      counter = (counter + 1) % 2;
    }
  }
}
   #+end_src

** DONE Display pieces
   [2021-11-27 sab 09:18]

   In the link shown previously I could download ~.svg~ assets. Then I
   found the following article

   https://lazyfoo.net/tutorials/SDL/06_extension_libraries_and_loading_other_image_formats/index.php

   which discusses how to deal with png images using SDL2.

   Maybe I can do the following:

   1. First I conver the .svg downloaded assets into png.

      https://stackoverflow.com/questions/9853325/how-to-convert-a-svg-to-a-png-with-imagemagick

      #+begin_src sh
inkscape -w 45 -h 45 black_king.svg -o output.png
      #+end_src

   2. Then I import the png assets following the above linked guide.

      https://gigi.nullneuron.net/gigilabs/loading-images-in-sdl2-with-sdl_image/

   ------------------------
   [2021-11-28 dom 08:52]

   I managed to display some pieces, although the quality is not that
   great. To do so I used the ~SDL_image~ library.

   #+begin_src sh
sudo pacman -S sdl2_image
   #+end_src

   and I added the SDL2_image to the pkg-config in the Makefile.

   After that the changes to the code were pretty minimal:

   - Imported the library

     #+begin_src c
#include <SDL2/SDL_image.h>
     #+end_src

   - Initialized it in ~main()~

     #+begin_src c
  // init image SDL
  IMG_Init(IMG_INIT_PNG);

  SDL_Surface *image = IMG_Load("../assets/black_king.svg");
  SDL_Texture *texture = SDL_CreateTextureFromSurface(renderer, image);
     #+end_src

   - And then I can draw to the ~renderer~ as follows

     #+begin_src c
    int x = 0;
    int y = 0;
    
    SDL_Rect chess_pos = {
	(int) floorf(x * CELL_WIDTH),
	(int) floorf(y * CELL_HEIGHT),
	(int) floorf(CELL_WIDTH),
	(int) floorf(CELL_HEIGHT),
    };

    SDL_RenderCopy(renderer, texture, NULL, &chess_pos);
     #+end_src

   - Once I'm done with the texture I cna destroy it with

     #+begin_src c
  SDL_DestroyTexture(texture);
  SDL_FreeSurface(image);
     #+end_src

** TODO Improve assets/pieces quality
   [2021-11-28 dom 08:54]

   The quality of the ~png~ for the pieces is pretty shitty, need to
   improve it somehow.

   Maybe find better assets?

** TODO Initialize board with correct pieces
   [2021-11-28 dom 08:55]

** TODO Handle logic of basic movement for each pieces
   [2021-11-28 dom 08:56]

   Need to understand if a given move is legal or not. This is based
   on various information, such as:

   - The type of pieces and the type of movement.

   - If there are any collisions or not.

** TODO Handle eating mechanics
   [2021-11-28 dom 08:56]
